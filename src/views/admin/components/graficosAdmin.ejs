<div class="row" id="charts">
    <!-- Reports -->
<div class="col-12">
  <div class="card">

      <div class="card-body">
      <h5 class="card-title">Evolução de Alunos <span>/Média por Mês</span></h5>

      <!-- Line Chart -->
      <div id="reportsChart"></div>

      <script>
        document.addEventListener("DOMContentLoaded", async () => {
            const response = await fetch('/admin/alunos/pegar-dados'); 
            const { alunos } = await response.json();

            const mesActual = new Date().toLocaleDateString('pt-br', { month: 'long', });
            
            const alunosAtivosPorMes = [];
            const mesesPago = [];
            const meses = [
               'Fevereiro',
                'Março',
                'Abril',
                'Maio',
                'Junho',
                'Julho',
                'Agosto',
                'Setembro',
                'Outubro',
                'Novembro',
                'Dezembro'
            ];
            
            meses.find(mes => {

                let alunosPagantes = alunos.filter(aluno => {
                    let alunoPagante = false;
                    aluno.matriculas[aluno.matriculas.length - 1].pagamentos.forEach(pagamento => {
                            if (pagamento.mes.mes.toLocaleLowerCase() == mes.toLocaleLowerCase()) {
                                alunoPagante = true;
                            }
                    });
                    if (alunoPagante) return aluno;
                });

                let alunosAtivos = alunos.filter(aluno => {
                    if (aluno.matriculas[aluno.matriculas.length - 1].estado_matricula == 'ativa') return aluno;
                })

                alunosAtivosPorMes.push(alunosAtivos.length);
                mesesPago.push(alunosPagantes.length);
                
                if (mesActual.toLowerCase() == mes.toLowerCase()) return mes;
                
            });

            new ApexCharts(document.querySelector("#reportsChart"), {
                series: [{
                name: 'Alunos Ativos',
                data: alunosAtivosPorMes,
                }, {
                name: 'Alunos Pagantes',
                data: mesesPago,
                }],
                chart: {
                height: 350,
                type: 'area',
                toolbar: {
                    show: false
                },
                },
                markers: {
                size: 4
                },
                colors: ['#4154f1', '#2eca6a'],
                fill: {
                type: "gradient",
                gradient: {
                    shadeIntensity: 1,
                    opacityFrom: 0.3,
                    opacityTo: 0.4,
                    stops: [0, 90, 100]
                }
                },
                dataLabels: {
                enabled: false
                },
                stroke: {
                curve: 'smooth',
                width: 2
                },
                xaxis: {
                categories: meses,
                },
                yaxis: {
                title: {
                    text: 'Quantidades de Alunos'
                }
                },
                
          }).render();
        });
      </script>
      <!-- End Line Chart -->

    </div>

  </div>
</div><!-- End Reports -->

<div class="col-12">
  <div class="card">
    <div class="card-body">
      <h5 class="card-title">Matrículas Ativas por Curso</h5>


       <!-- Pie Chart -->
    <div id="pieChart" style="min-height: 400px;" class="echart"></div>

    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        await fetch('/admin/cursos/pegar-dados').then(response => {
          response.json().then(data => {
            const { cursos } = data;
            let datas = [];
            let content = {};

            cursos.forEach(curso => {
              let totalMatriculas = 0;
              curso.classes.forEach(classe => {
                totalMatriculas += classe.matriculas.length
              });

              datas.push({
                name: curso.nome,
                value: totalMatriculas 
              })
            });

            echarts.init(document.querySelector("#pieChart")).setOption({
          
              tooltip: {
                trigger: 'item'
              },
              legend: {
                orient: 'vertical',
                left: 'left'
              },
              series: [{
                name: 'Curso:',
                type: 'pie',
                radius: '70%',
                data: datas,
                emphasis: {
                  itemStyle: {
                    shadowBlur: 10,
                    shadowOffsetX: 0,
                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                  },
                  label: {
                    show: true,
                    fontSize: '16',
                    fontWeight: 'bold'
                  }
                }
              }]
            });
      

          }).catch(error => {
            console.log(error)
          });
        }).catch(error => {
          console.log(error)
        })
        
      });
    </script>
    <!-- End Pie Chart -->

    </div>
  </div>
</div>

<div class="col-12">
  <div class="card">
    <div class="card-body">
      <h5 class="card-title">Receitas e Inadimplência Anual<span> /Média por Mês</span></h5>

      <!-- Line Chart -->
      <div id="lineChart"></div>

      <script>
        document.addEventListener("DOMContentLoaded", async () => {

            const response = await fetch('/admin/alunos/pegar-dados'); 
            const { alunos } = await response.json();

            const mesActual = new Date().toLocaleDateString('pt-br', { month: 'long', });

            const receitasAnual = [];
            const receitasAnualRealizadas = [];
            const inadimplenciaAnual = [];

            const meses = [
               'Fevereiro',
                'Março',
                'Abril',
                'Maio',
                'Junho',
                'Julho',
                'Agosto',
                'Setembro',
                'Outubro',
                'Novembro',
                'Dezembro'
            ];

            meses.find(mes => {
                let receitaMensal = 0;
                let receitaMensalRealizada = 0;
                let inadimplenciaMensal = 0;

                alunos.forEach(aluno => {
                    let alunosInadimplentes = 0;
                    receitaMensal += parseInt(aluno.matriculas[aluno.matriculas.length - 1].classe[0].preco);

                   
                    aluno.matriculas[aluno.matriculas.length - 1].pagamentos.forEach(pagamento => {
                        if (pagamento.mes.mes.toLocaleLowerCase() == mes.toLocaleLowerCase()) {
                            alunosInadimplentes++
                            receitaMensalRealizada += parseInt(aluno.matriculas[aluno.matriculas.length - 1].classe[0].preco);
                            inadimplenciaMensal += parseInt((receitaMensal - receitaMensalRealizada) * alunosInadimplentes);
                        } 
                    });
                });

                receitasAnual.push(receitaMensal);
                receitasAnualRealizadas.push(receitaMensalRealizada);
                inadimplenciaAnual.push(inadimplenciaMensal);

                if (mesActual.toLowerCase() == mes.toLowerCase()) return mes;

            });


          new ApexCharts(document.querySelector("#lineChart"), {
            series: [{
              name: "Receita Anual Esperada",
              data: receitasAnual,
            },
            {
              name: "Receita Anual Realizada",
              data: receitasAnualRealizadas,
            },
            {
              name: "Inadimplência Anual",
              data: inadimplenciaAnual,
            }],
            chart: {
              height: 350,
              type: 'line',
              zoom: {
                enabled: false
              }
            },
            markers: {
                size: 4
              },
            dataLabels: {
              enabled: false
            },
            stroke: {
              curve: 'smooth',
              width: 1
            },
            grid: {
              row: {
                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns
                opacity: 0.5
              },
            },
            xaxis: {
              categories: meses,
            },
            yaxis: {
              title: {
                text: 'Valores (kz)'
              }
            },
          }).render();
        });
      </script>
      <!-- End Line Chart -->

    </div>
  </div>
</div>

</div>
